// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "task/internal/domain"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

type Database_Expecter struct {
	mock *mock.Mock
}

func (_m *Database) EXPECT() *Database_Expecter {
	return &Database_Expecter{mock: &_m.Mock}
}

// CreateAssignments provides a mock function with given fields: ctx, taskAssignments
func (_m *Database) CreateAssignments(ctx context.Context, taskAssignments *domain.TaskAsignments) ([]domain.Assignment, error) {
	ret := _m.Called(ctx, taskAssignments)

	if len(ret) == 0 {
		panic("no return value specified for CreateAssignments")
	}

	var r0 []domain.Assignment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.TaskAsignments) ([]domain.Assignment, error)); ok {
		return rf(ctx, taskAssignments)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.TaskAsignments) []domain.Assignment); ok {
		r0 = rf(ctx, taskAssignments)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Assignment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.TaskAsignments) error); ok {
		r1 = rf(ctx, taskAssignments)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_CreateAssignments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAssignments'
type Database_CreateAssignments_Call struct {
	*mock.Call
}

// CreateAssignments is a helper method to define mock.On call
//   - ctx context.Context
//   - taskAssignments *domain.TaskAsignments
func (_e *Database_Expecter) CreateAssignments(ctx interface{}, taskAssignments interface{}) *Database_CreateAssignments_Call {
	return &Database_CreateAssignments_Call{Call: _e.mock.On("CreateAssignments", ctx, taskAssignments)}
}

func (_c *Database_CreateAssignments_Call) Run(run func(ctx context.Context, taskAssignments *domain.TaskAsignments)) *Database_CreateAssignments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.TaskAsignments))
	})
	return _c
}

func (_c *Database_CreateAssignments_Call) Return(assignments []domain.Assignment, err error) *Database_CreateAssignments_Call {
	_c.Call.Return(assignments, err)
	return _c
}

func (_c *Database_CreateAssignments_Call) RunAndReturn(run func(context.Context, *domain.TaskAsignments) ([]domain.Assignment, error)) *Database_CreateAssignments_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTask provides a mock function with given fields: ctx, task
func (_m *Database) CreateTask(ctx context.Context, task *domain.Task) (uuid.UUID, error) {
	ret := _m.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Task) (uuid.UUID, error)); ok {
		return rf(ctx, task)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Task) uuid.UUID); ok {
		r0 = rf(ctx, task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Task) error); ok {
		r1 = rf(ctx, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_CreateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTask'
type Database_CreateTask_Call struct {
	*mock.Call
}

// CreateTask is a helper method to define mock.On call
//   - ctx context.Context
//   - task *domain.Task
func (_e *Database_Expecter) CreateTask(ctx interface{}, task interface{}) *Database_CreateTask_Call {
	return &Database_CreateTask_Call{Call: _e.mock.On("CreateTask", ctx, task)}
}

func (_c *Database_CreateTask_Call) Run(run func(ctx context.Context, task *domain.Task)) *Database_CreateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Task))
	})
	return _c
}

func (_c *Database_CreateTask_Call) Return(_a0 uuid.UUID, _a1 error) *Database_CreateTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_CreateTask_Call) RunAndReturn(run func(context.Context, *domain.Task) (uuid.UUID, error)) *Database_CreateTask_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTaskWithAssignments provides a mock function with given fields: ctx, assignment
func (_m *Database) CreateTaskWithAssignments(ctx context.Context, assignment *domain.TaskWithAsignment) (uuid.UUID, error) {
	ret := _m.Called(ctx, assignment)

	if len(ret) == 0 {
		panic("no return value specified for CreateTaskWithAssignments")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.TaskWithAsignment) (uuid.UUID, error)); ok {
		return rf(ctx, assignment)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.TaskWithAsignment) uuid.UUID); ok {
		r0 = rf(ctx, assignment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.TaskWithAsignment) error); ok {
		r1 = rf(ctx, assignment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_CreateTaskWithAssignments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTaskWithAssignments'
type Database_CreateTaskWithAssignments_Call struct {
	*mock.Call
}

// CreateTaskWithAssignments is a helper method to define mock.On call
//   - ctx context.Context
//   - assignment *domain.TaskWithAsignment
func (_e *Database_Expecter) CreateTaskWithAssignments(ctx interface{}, assignment interface{}) *Database_CreateTaskWithAssignments_Call {
	return &Database_CreateTaskWithAssignments_Call{Call: _e.mock.On("CreateTaskWithAssignments", ctx, assignment)}
}

func (_c *Database_CreateTaskWithAssignments_Call) Run(run func(ctx context.Context, assignment *domain.TaskWithAsignment)) *Database_CreateTaskWithAssignments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.TaskWithAsignment))
	})
	return _c
}

func (_c *Database_CreateTaskWithAssignments_Call) Return(_a0 uuid.UUID, _a1 error) *Database_CreateTaskWithAssignments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_CreateTaskWithAssignments_Call) RunAndReturn(run func(context.Context, *domain.TaskWithAsignment) (uuid.UUID, error)) *Database_CreateTaskWithAssignments_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAssignment provides a mock function with given fields: ctx, assignmentID
func (_m *Database) DeleteAssignment(ctx context.Context, assignmentID uuid.UUID) error {
	ret := _m.Called(ctx, assignmentID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAssignment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, assignmentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_DeleteAssignment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAssignment'
type Database_DeleteAssignment_Call struct {
	*mock.Call
}

// DeleteAssignment is a helper method to define mock.On call
//   - ctx context.Context
//   - assignmentID uuid.UUID
func (_e *Database_Expecter) DeleteAssignment(ctx interface{}, assignmentID interface{}) *Database_DeleteAssignment_Call {
	return &Database_DeleteAssignment_Call{Call: _e.mock.On("DeleteAssignment", ctx, assignmentID)}
}

func (_c *Database_DeleteAssignment_Call) Run(run func(ctx context.Context, assignmentID uuid.UUID)) *Database_DeleteAssignment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Database_DeleteAssignment_Call) Return(_a0 error) *Database_DeleteAssignment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_DeleteAssignment_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *Database_DeleteAssignment_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTask provides a mock function with given fields: ctx, id
func (_m *Database) DeleteTask(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_DeleteTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTask'
type Database_DeleteTask_Call struct {
	*mock.Call
}

// DeleteTask is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *Database_Expecter) DeleteTask(ctx interface{}, id interface{}) *Database_DeleteTask_Call {
	return &Database_DeleteTask_Call{Call: _e.mock.On("DeleteTask", ctx, id)}
}

func (_c *Database_DeleteTask_Call) Run(run func(ctx context.Context, id uuid.UUID)) *Database_DeleteTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Database_DeleteTask_Call) Return(_a0 error) *Database_DeleteTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_DeleteTask_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *Database_DeleteTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskByClass provides a mock function with given fields: ctx, class
func (_m *Database) GetTaskByClass(ctx context.Context, class string) ([]*domain.LessonTask, error) {
	ret := _m.Called(ctx, class)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskByClass")
	}

	var r0 []*domain.LessonTask
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*domain.LessonTask, error)); ok {
		return rf(ctx, class)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*domain.LessonTask); ok {
		r0 = rf(ctx, class)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.LessonTask)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, class)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetTaskByClass_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskByClass'
type Database_GetTaskByClass_Call struct {
	*mock.Call
}

// GetTaskByClass is a helper method to define mock.On call
//   - ctx context.Context
//   - class string
func (_e *Database_Expecter) GetTaskByClass(ctx interface{}, class interface{}) *Database_GetTaskByClass_Call {
	return &Database_GetTaskByClass_Call{Call: _e.mock.On("GetTaskByClass", ctx, class)}
}

func (_c *Database_GetTaskByClass_Call) Run(run func(ctx context.Context, class string)) *Database_GetTaskByClass_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Database_GetTaskByClass_Call) Return(_a0 []*domain.LessonTask, _a1 error) *Database_GetTaskByClass_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetTaskByClass_Call) RunAndReturn(run func(context.Context, string) ([]*domain.LessonTask, error)) *Database_GetTaskByClass_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskByID provides a mock function with given fields: ctx, id
func (_m *Database) GetTaskByID(ctx context.Context, id uuid.UUID) (*domain.Task, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskByID")
	}

	var r0 *domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.Task, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Task); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetTaskByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskByID'
type Database_GetTaskByID_Call struct {
	*mock.Call
}

// GetTaskByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *Database_Expecter) GetTaskByID(ctx interface{}, id interface{}) *Database_GetTaskByID_Call {
	return &Database_GetTaskByID_Call{Call: _e.mock.On("GetTaskByID", ctx, id)}
}

func (_c *Database_GetTaskByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *Database_GetTaskByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Database_GetTaskByID_Call) Return(_a0 *domain.Task, _a1 error) *Database_GetTaskByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetTaskByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*domain.Task, error)) *Database_GetTaskByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTasks provides a mock function with given fields: ctx
func (_m *Database) GetTasks(ctx context.Context) ([]*domain.Task, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTasks")
	}

	var r0 []*domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*domain.Task, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*domain.Task); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasks'
type Database_GetTasks_Call struct {
	*mock.Call
}

// GetTasks is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Database_Expecter) GetTasks(ctx interface{}) *Database_GetTasks_Call {
	return &Database_GetTasks_Call{Call: _e.mock.On("GetTasks", ctx)}
}

func (_c *Database_GetTasks_Call) Run(run func(ctx context.Context)) *Database_GetTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Database_GetTasks_Call) Return(_a0 []*domain.Task, _a1 error) *Database_GetTasks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Database_GetTasks_Call) RunAndReturn(run func(context.Context) ([]*domain.Task, error)) *Database_GetTasks_Call {
	_c.Call.Return(run)
	return _c
}

// SetTaskResultsByUsers provides a mock function with given fields: ctx, taskResults
func (_m *Database) SetTaskResultsByUsers(ctx context.Context, taskResults *domain.TaskResult) error {
	ret := _m.Called(ctx, taskResults)

	if len(ret) == 0 {
		panic("no return value specified for SetTaskResultsByUsers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.TaskResult) error); ok {
		r0 = rf(ctx, taskResults)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_SetTaskResultsByUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTaskResultsByUsers'
type Database_SetTaskResultsByUsers_Call struct {
	*mock.Call
}

// SetTaskResultsByUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - taskResults *domain.TaskResult
func (_e *Database_Expecter) SetTaskResultsByUsers(ctx interface{}, taskResults interface{}) *Database_SetTaskResultsByUsers_Call {
	return &Database_SetTaskResultsByUsers_Call{Call: _e.mock.On("SetTaskResultsByUsers", ctx, taskResults)}
}

func (_c *Database_SetTaskResultsByUsers_Call) Run(run func(ctx context.Context, taskResults *domain.TaskResult)) *Database_SetTaskResultsByUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.TaskResult))
	})
	return _c
}

func (_c *Database_SetTaskResultsByUsers_Call) Return(_a0 error) *Database_SetTaskResultsByUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_SetTaskResultsByUsers_Call) RunAndReturn(run func(context.Context, *domain.TaskResult) error) *Database_SetTaskResultsByUsers_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAssignment provides a mock function with given fields: ctx, task
func (_m *Database) UpdateAssignment(ctx context.Context, task *domain.TaskAsignment) error {
	ret := _m.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAssignment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.TaskAsignment) error); ok {
		r0 = rf(ctx, task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_UpdateAssignment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAssignment'
type Database_UpdateAssignment_Call struct {
	*mock.Call
}

// UpdateAssignment is a helper method to define mock.On call
//   - ctx context.Context
//   - task *domain.TaskAsignment
func (_e *Database_Expecter) UpdateAssignment(ctx interface{}, task interface{}) *Database_UpdateAssignment_Call {
	return &Database_UpdateAssignment_Call{Call: _e.mock.On("UpdateAssignment", ctx, task)}
}

func (_c *Database_UpdateAssignment_Call) Run(run func(ctx context.Context, task *domain.TaskAsignment)) *Database_UpdateAssignment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.TaskAsignment))
	})
	return _c
}

func (_c *Database_UpdateAssignment_Call) Return(_a0 error) *Database_UpdateAssignment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_UpdateAssignment_Call) RunAndReturn(run func(context.Context, *domain.TaskAsignment) error) *Database_UpdateAssignment_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTask provides a mock function with given fields: ctx, task
func (_m *Database) UpdateTask(ctx context.Context, task *domain.Task) error {
	ret := _m.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Task) error); ok {
		r0 = rf(ctx, task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_UpdateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTask'
type Database_UpdateTask_Call struct {
	*mock.Call
}

// UpdateTask is a helper method to define mock.On call
//   - ctx context.Context
//   - task *domain.Task
func (_e *Database_Expecter) UpdateTask(ctx interface{}, task interface{}) *Database_UpdateTask_Call {
	return &Database_UpdateTask_Call{Call: _e.mock.On("UpdateTask", ctx, task)}
}

func (_c *Database_UpdateTask_Call) Run(run func(ctx context.Context, task *domain.Task)) *Database_UpdateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Task))
	})
	return _c
}

func (_c *Database_UpdateTask_Call) Return(_a0 error) *Database_UpdateTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_UpdateTask_Call) RunAndReturn(run func(context.Context, *domain.Task) error) *Database_UpdateTask_Call {
	_c.Call.Return(run)
	return _c
}

// NewDatabase creates a new instance of Database. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Database {
	mock := &Database{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
