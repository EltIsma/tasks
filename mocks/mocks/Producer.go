// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	domain "task/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// Producer is an autogenerated mock type for the Producer type
type Producer struct {
	mock.Mock
}

type Producer_Expecter struct {
	mock *mock.Mock
}

func (_m *Producer) EXPECT() *Producer_Expecter {
	return &Producer_Expecter{mock: &_m.Mock}
}

// Produce provides a mock function with given fields: event
func (_m *Producer) Produce(event domain.Event) error {
	ret := _m.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for Produce")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Event) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Producer_Produce_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Produce'
type Producer_Produce_Call struct {
	*mock.Call
}

// Produce is a helper method to define mock.On call
//   - event domain.Event
func (_e *Producer_Expecter) Produce(event interface{}) *Producer_Produce_Call {
	return &Producer_Produce_Call{Call: _e.mock.On("Produce", event)}
}

func (_c *Producer_Produce_Call) Run(run func(event domain.Event)) *Producer_Produce_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Event))
	})
	return _c
}

func (_c *Producer_Produce_Call) Return(_a0 error) *Producer_Produce_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Producer_Produce_Call) RunAndReturn(run func(domain.Event) error) *Producer_Produce_Call {
	_c.Call.Return(run)
	return _c
}

// NewProducer creates a new instance of Producer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProducer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Producer {
	mock := &Producer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
