// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

type Cache_Expecter struct {
	mock *mock.Mock
}

func (_m *Cache) EXPECT() *Cache_Expecter {
	return &Cache_Expecter{mock: &_m.Mock}
}

// Del provides a mock function with given fields: ctx, key
func (_m *Cache) Del(ctx context.Context, key interface{}) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Del")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cache_Del_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Del'
type Cache_Del_Call struct {
	*mock.Call
}

// Del is a helper method to define mock.On call
//   - ctx context.Context
//   - key interface{}
func (_e *Cache_Expecter) Del(ctx interface{}, key interface{}) *Cache_Del_Call {
	return &Cache_Del_Call{Call: _e.mock.On("Del", ctx, key)}
}

func (_c *Cache_Del_Call) Run(run func(ctx context.Context, key interface{})) *Cache_Del_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *Cache_Del_Call) Return(_a0 error) *Cache_Del_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cache_Del_Call) RunAndReturn(run func(context.Context, interface{}) error) *Cache_Del_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, key
func (_m *Cache) Get(ctx context.Context, key interface{}) (interface{}, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (interface{}, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) interface{}); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Cache_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Cache_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key interface{}
func (_e *Cache_Expecter) Get(ctx interface{}, key interface{}) *Cache_Get_Call {
	return &Cache_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *Cache_Get_Call) Run(run func(ctx context.Context, key interface{})) *Cache_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *Cache_Get_Call) Return(value interface{}, err error) *Cache_Get_Call {
	_c.Call.Return(value, err)
	return _c
}

func (_c *Cache_Get_Call) RunAndReturn(run func(context.Context, interface{}) (interface{}, error)) *Cache_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, key, value, ttl
func (_m *Cache) Set(ctx context.Context, key interface{}, value interface{}, ttl time.Duration) error {
	ret := _m.Called(ctx, key, value, ttl)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, time.Duration) error); ok {
		r0 = rf(ctx, key, value, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cache_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type Cache_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - key interface{}
//   - value interface{}
//   - ttl time.Duration
func (_e *Cache_Expecter) Set(ctx interface{}, key interface{}, value interface{}, ttl interface{}) *Cache_Set_Call {
	return &Cache_Set_Call{Call: _e.mock.On("Set", ctx, key, value, ttl)}
}

func (_c *Cache_Set_Call) Run(run func(ctx context.Context, key interface{}, value interface{}, ttl time.Duration)) *Cache_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}), args[2].(interface{}), args[3].(time.Duration))
	})
	return _c
}

func (_c *Cache_Set_Call) Return(_a0 error) *Cache_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cache_Set_Call) RunAndReturn(run func(context.Context, interface{}, interface{}, time.Duration) error) *Cache_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewCache creates a new instance of Cache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *Cache {
	mock := &Cache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
